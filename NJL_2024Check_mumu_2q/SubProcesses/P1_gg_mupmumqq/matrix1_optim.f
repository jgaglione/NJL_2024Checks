      SUBROUTINE SMATRIX1(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.2.0, 2021-08-22
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: g g > mu+ mu- c c~ WEIGHTED<=4 @1
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      Include 'genps.inc'
      Include 'maxconfigs.inc'
      Include 'nexternal.inc'
      Include 'maxamps.inc'
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=12)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=17) 
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=16) 
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     LOCAL VARIABLES 
C     
      INTEGER CONFSUB(MAXSPROC,LMAXCONFIGS)
      INCLUDE 'config_subproc_map.inc'
      INTEGER NHEL(NEXTERNAL,NCOMB)
      REAL*8 T
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 XTOT
      INTEGER  J, JJ

      double precision get_channel_cut
      external get_channel_cut

C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2


C     
C     INFORMATION TO WRITE THE HELICITY IN THE EVENT --not memory
C      efficient--
C     
      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER NB_SPIN_STATE_in(2)
      common /nb_hel_state/ nb_spin_state_in

      REAL*8 POL(2)

      COMMON/TO_POLARIZATION/ POL
      double precision tmin_for_channel
      integer sde_strat   ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      
      DATA (NHEL(I,1),I=1,6) /-1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,2),I=1,6) /-1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,3),I=1,6) /-1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,4),I=1,6) /-1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,5),I=1,6) /-1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,6),I=1,6) /-1, 1,-1,-1, 1,-1/
      DATA (NHEL(I,7),I=1,6) / 1,-1, 1,-1, 1,-1/
      DATA (NHEL(I,8),I=1,6) / 1,-1, 1, 1, 1,-1/
      DATA (NHEL(I,9),I=1,6) / 1,-1,-1,-1, 1,-1/
      DATA (NHEL(I,10),I=1,6) / 1, 1, 1,-1, 1,-1/
      DATA (NHEL(I,11),I=1,6) / 1, 1, 1, 1, 1,-1/
      DATA (NHEL(I,12),I=1,6) / 1, 1,-1,-1, 1,-1/
      DATA IDEN/256/

C     ----------
C     BEGIN CODE
C     ----------

      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (multi_channel) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=2
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
C     Kiran please check if you need this:    
      DO I=1,NCOMB
        TS(I)=0d0
      ENDDO

      call MATRIX1(P ,JC(1), TS)
      DO I=1,NCOMB     
        T=TS(I)  
        DO JJ=1,nincoming
          IF(POL(JJ).NE.1d0.AND.NHEL(JJ,I).EQ.INT(SIGN(1d0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))*NB_SPIN_STATE_IN(JJ)/2d0   ! NB_SPIN_STATE(JJ)/2d0 is added for polarised beam
          ELSE IF(POL(JJ).NE.1d0)THEN
            T=T*(2d0-ABS(POL(JJ)))*NB_SPIN_STATE_IN(JJ)/2d0
          ENDIF
        ENDDO
        ANS=ANS+DABS(T)
        TS(I)=T
      ENDDO

      IF (ANS.ne.0d0) THEN
        CALL RANMAR(R)
        SUMHEL=0d0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE   
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,LMAXCONFIGS
          J = CONFSUB(1, I)
          if (J.ne.0)then
            if (sde_strat.eq.1)then
              AMP2(J) = AMP2(J) * GET_CHANNEL_CUT(P, I)
            else
              AMP2(J) = GET_CHANNEL_CUT(P, I)
            endif
            XTOT=XTOT+AMP2(J)

          endif
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(1))/XTOT
        ELSE IF(ANS.ne.0d0) THEN
          write(*,*) 'Problem in the multi-channeling. All amp2 are'
     $     //' zero but not the total matrix-element'
          stop 1
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      END


      Subroutine  MATRIX1(P,IC, TS)
C     
C     Generated by MadGraph5_aMC@NLO v. 3.2.0, 2021-08-22
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: g g > mu+ mu- c c~ WEIGHTED<=4 @1
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=17) 
      include 'genps.inc'
      include 'nexternal.inc'
      include 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=66, NCOLOR=2) 
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
      INTEGER                 NCOMB         
      PARAMETER (             NCOMB=12)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      REAL*8 TS(NCOMB)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N,K
      COMPLEX*16 ZTEMP,TMP_JAMP(2)
      COMPLEX*16 TMP(6)
      REAL*8 CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NCOMB,NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0d0, 0d0), (1d0, 0d0)/

      double precision fk_ZERO 
      double precision fk_mdl_WPi53due 
      save fk_ZERO 
      save fk_mdl_WPi53due 

      logical first
      data first /.true./
      save first
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX1

C     
C     GLOBAL VARIABLES
C     
      Double Precision amp2(maxamps), jamp2(0:maxflow)
      common/to_amps/  amp2,       jamp2
      include 'coupl.inc'

      double precision tmin_for_channel
      integer sde_strat   ! 1 means standard single diagram enhancement strategy,
C     2 means approximation by the	denominator of the propagator
      common/TO_CHANNEL_STRAT/tmin_for_channel,	sde_strat

      double precision small_width_treatment
      common/narrow_width/small_width_treatment
C     
C     COLOR DATA
C     
      DATA (CF(i,  1),i=  1,  2) /5.333333333333333d+00,
     $ -6.666666666666666d-01/
C     1 T(1,2,5,6)
      DATA (CF(i,  2),i=  1,  2) /-6.666666666666666d-01
     $ ,5.333333333333333d+00/
C     1 T(2,1,5,6)
C     ----------
C     BEGIN CODE
C     ----------
      if (first) then
        first=.false.
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(ZERO
     $   *small_width_treatment)), ZERO)
        IF(ZERO.ne.0d0) fk_ZERO = SIGN(MAX(ABS(ZERO), ABS(mdl_MM
     $   *small_width_treatment)), ZERO)
        IF(mdl_WPi53due.ne.0d0) fk_mdl_WPi53due =
     $    SIGN(MAX(ABS(mdl_WPi53due), ABS(mdl_MassB
     $   *small_width_treatment)), mdl_WPi53due)
      endif
      AMP(:,:) = (0d0,0d0)
            CALL VXXXXX(P(0,1),ZERO,+1,-1*IC(1),W(1,1)) ! count 17
      CALL VXXXXX(P(0,1),ZERO,-1,-1*IC(1),W(1,2)) ! count 17
      CALL VXXXXX(P(0,2),ZERO,+1,-1*IC(2),W(1,3)) ! count 37
      CALL VXXXXX(P(0,2),ZERO,-1,-1*IC(2),W(1,4)) ! count 37
      CALL IXXXXX(P(0,3),MDL_MM,+1,-1*IC(3),W(1,5)) ! count 39
      CALL IXXXXX(P(0,3),MDL_MM,-1,-1*IC(3),W(1,6)) ! count 21
      CALL OXXXXX(P(0,4),MDL_MM,+1,+1*IC(4),W(1,7)) ! count 21
      CALL OXXXXX(P(0,4),MDL_MM,-1,+1*IC(4),W(1,8)) ! count 39
      CALL OXXXXX(P(0,5),ZERO,+1,+1*IC(5),W(1,9)) ! count 8
      CALL IXXXXX(P(0,6),ZERO,-1,-1*IC(6),W(1,10)) ! count 8
      CALL VVV1P0_1(W(1,1),W(1,3),GC_14,ZERO, FK_ZERO,W(1,11)) ! count 5
      CALL VVV1P0_1(W(1,2),W(1,4),GC_14,ZERO, FK_ZERO,W(1,14)) ! count 5
      CALL FFS1_3(W(1,5),W(1,9),GC_62,MDL_MASSB, FK_MDL_WPI53DUE,W(1,15)) ! count 50
      CALL FFS1_3(W(1,6),W(1,9),GC_62,MDL_MASSB, FK_MDL_WPI53DUE,W(1,16)) ! count 26
      CALL FFV1_2(W(1,10),W(1,11),GC_16,ZERO, FK_ZERO,W(1,17)) ! count 3
      CALL FFV1_2(W(1,10),W(1,14),GC_16,ZERO, FK_ZERO,W(1,20)) ! count 3
      CALL FFS2P1N_1(W(1,7), W(1,15), GC_62, TMP(1))
      call CombineAmp(2,
     & (/11,2/), 
     & (/17,20/),
     & TMP, W, AMP(1,1))
      CALL FFS2P1N_1(W(1,8), W(1,15), GC_62, TMP(1))
      call CombineAmp(2,
     & (/10,1/), 
     & (/17,20/),
     & TMP, W, AMP(1,1))
      CALL FFS2P1N_1(W(1,8), W(1,16), GC_62, TMP(1))
      call CombineAmp(2,
     & (/12,3/), 
     & (/17,20/),
     & TMP, W, AMP(1,1)) ! count 1
      CALL FFS2_3(W(1,10),W(1,7),GC_62,MDL_MASSB, FK_MDL_WPI53DUE,W(1,21)) ! count 26
      CALL FFS2_3(W(1,10),W(1,8),GC_62,MDL_MASSB, FK_MDL_WPI53DUE,W(1,22)) ! count 50
      CALL VSS1P1N_1(W(1,21), W(1,15), GC_15, TMP(1))
      call CombineAmp(2,
     & (/11,2/), 
     & (/11,14/),
     & TMP, W, AMP(1,2))
      CALL VSS1P1N_1(W(1,22), W(1,15), GC_15, TMP(1))
      call CombineAmp(2,
     & (/10,1/), 
     & (/11,14/),
     & TMP, W, AMP(1,2))
      CALL VSS1P1N_1(W(1,22), W(1,16), GC_15, TMP(1))
      call CombineAmp(2,
     & (/12,3/), 
     & (/11,14/),
     & TMP, W, AMP(1,2)) ! count 1
      CALL FFV1_1(W(1,9),W(1,11),GC_16,ZERO, FK_ZERO,W(1,23)) ! count 3
      CALL FFV1_1(W(1,9),W(1,14),GC_16,ZERO, FK_ZERO,W(1,26)) ! count 3
      CALL FFS1_0(W(1,5),W(1,23),W(1,21),GC_62,AMP(11,3))
      CALL FFS1P1N_1(W(1,23), W(1,22), GC_62, TMP(1))
      call CombineAmp(2,
     & (/10,12/), 
     & (/5,6/),
     & TMP, W, AMP(1,3))
      CALL FFS1_0(W(1,5),W(1,26),W(1,21),GC_62,AMP(2,3))
      CALL FFS1P1N_1(W(1,26), W(1,22), GC_62, TMP(1))
      call CombineAmp(2,
     & (/1,3/), 
     & (/5,6/),
     & TMP, W, AMP(1,3)) ! count 1
      CALL FFV1_1(W(1,9),W(1,1),GC_16,ZERO, FK_ZERO,W(1,27)) ! count 4
      CALL FFV1_1(W(1,9),W(1,2),GC_16,ZERO, FK_ZERO,W(1,28)) ! count 4
      CALL FFV1_2(W(1,10),W(1,3),GC_16,ZERO, FK_ZERO,W(1,29)) ! count 14
      CALL FFV1_2(W(1,10),W(1,4),GC_16,ZERO, FK_ZERO,W(1,30)) ! count 14
      CALL FFS1_3(W(1,5),W(1,27),GC_62,MDL_MASSB, ZERO,W(1,31)) ! count 8
      CALL FFS1_3(W(1,5),W(1,28),GC_62,MDL_MASSB, ZERO,W(1,32)) ! count 8
      CALL FFS1_3(W(1,6),W(1,27),GC_62,MDL_MASSB, ZERO,W(1,33)) ! count 4
      CALL FFS1_3(W(1,6),W(1,28),GC_62,MDL_MASSB, ZERO,W(1,34)) ! count 4
      CALL FFS2P1N_3(W(1,29), W(1,7), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/11,5/), 
     & (/31,32/), 
     & TMP, W, AMP(1,4))
      CALL FFS2P1N_3(W(1,29), W(1,8), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/10,4,12,6/), 
     & (/31,32,33,34/), 
     & TMP, W, AMP(1,4))
      CALL FFS2P1N_3(W(1,30), W(1,7), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/8,2/), 
     & (/31,32/), 
     & TMP, W, AMP(1,4))
      CALL FFS2P1N_3(W(1,30), W(1,8), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/7,1,9,3/), 
     & (/31,32,33,34/), 
     & TMP, W, AMP(1,4)) ! count 1
      CALL FFV1_1(W(1,27),W(1,3),GC_16,ZERO, FK_ZERO,W(1,35)) ! count 3
      CALL FFV1_1(W(1,27),W(1,4),GC_16,ZERO, FK_ZERO,W(1,36)) ! count 3
      CALL FFV1_1(W(1,28),W(1,3),GC_16,ZERO, FK_ZERO,W(1,37)) ! count 3
      CALL FFV1_1(W(1,28),W(1,4),GC_16,ZERO, FK_ZERO,W(1,38)) ! count 3
      CALL FFS1P1N_2(W(1,5), W(1,21), GC_62, TMP(1))
      call CombineAmp(4,
     & (/11,8,5,2/), 
     & (/35,36,37,38/),
     & TMP, W, AMP(1,5))
      CALL FFS1P1N_2(W(1,5), W(1,22), GC_62, TMP(1))
      call CombineAmp(4,
     & (/10,7,4,1/), 
     & (/35,36,37,38/),
     & TMP, W, AMP(1,5))
      CALL FFS1P1N_2(W(1,6), W(1,22), GC_62, TMP(1))
      call CombineAmp(4,
     & (/12,9,6,3/), 
     & (/35,36,37,38/),
     & TMP, W, AMP(1,5)) ! count 1
      CALL VSS1P1N_3(W(1,3), W(1,21), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/11,5/), 
     & (/31,32/), 
     & TMP, W, AMP(1,6))
      CALL VSS1P1N_3(W(1,3), W(1,22), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/10,4,12,6/), 
     & (/31,32,33,34/), 
     & TMP, W, AMP(1,6))
      CALL VSS1P1N_3(W(1,4), W(1,21), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/8,2/), 
     & (/31,32/), 
     & TMP, W, AMP(1,6))
      CALL VSS1P1N_3(W(1,4), W(1,22), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/7,1,9,3/), 
     & (/31,32,33,34/), 
     & TMP, W, AMP(1,6)) ! count 1
      CALL FFV1_2(W(1,10),W(1,1),GC_16,ZERO, FK_ZERO,W(1,39)) ! count 4
      CALL FFV1_2(W(1,10),W(1,2),GC_16,ZERO, FK_ZERO,W(1,40)) ! count 4
      CALL FFV1_1(W(1,9),W(1,3),GC_16,ZERO, FK_ZERO,W(1,41)) ! count 14
      CALL FFV1_1(W(1,9),W(1,4),GC_16,ZERO, FK_ZERO,W(1,42)) ! count 14
      CALL FFS2_3(W(1,39),W(1,7),GC_62,MDL_MASSB, ZERO,W(1,43)) ! count 4
      CALL FFS2_3(W(1,39),W(1,8),GC_62,MDL_MASSB, ZERO,W(1,44)) ! count 8
      CALL FFS2_3(W(1,40),W(1,7),GC_62,MDL_MASSB, ZERO,W(1,45)) ! count 4
      CALL FFS2_3(W(1,40),W(1,8),GC_62,MDL_MASSB, ZERO,W(1,46)) ! count 8
      CALL FFS1P1N_3(W(1,5), W(1,41), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/11,10,5,4/), 
     & (/43,44,45,46/), 
     & TMP, W, AMP(1,7))
      CALL FFS1P1N_3(W(1,5), W(1,42), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/8,7,2,1/), 
     & (/43,44,45,46/), 
     & TMP, W, AMP(1,7))
      CALL FFS1P1N_3(W(1,6), W(1,41), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/12,6/), 
     & (/44,46/), 
     & TMP, W, AMP(1,7))
      CALL FFS1P1N_3(W(1,6), W(1,42), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/9,3/), 
     & (/44,46/), 
     & TMP, W, AMP(1,7)) ! count 1
      CALL FFV1_2(W(1,39),W(1,3),GC_16,ZERO, FK_ZERO,W(1,47)) ! count 3
      CALL FFV1_2(W(1,39),W(1,4),GC_16,ZERO, FK_ZERO,W(1,48)) ! count 3
      CALL FFV1_2(W(1,40),W(1,3),GC_16,ZERO, FK_ZERO,W(1,49)) ! count 3
      CALL FFV1_2(W(1,40),W(1,4),GC_16,ZERO, FK_ZERO,W(1,50)) ! count 3
      CALL FFS2P1N_1(W(1,7), W(1,15), GC_62, TMP(1))
      call CombineAmp(4,
     & (/11,8,5,2/), 
     & (/47,48,49,50/),
     & TMP, W, AMP(1,8))
      CALL FFS2P1N_1(W(1,8), W(1,15), GC_62, TMP(1))
      call CombineAmp(4,
     & (/10,7,4,1/), 
     & (/47,48,49,50/),
     & TMP, W, AMP(1,8))
      CALL FFS2P1N_1(W(1,8), W(1,16), GC_62, TMP(1))
      call CombineAmp(4,
     & (/12,9,6,3/), 
     & (/47,48,49,50/),
     & TMP, W, AMP(1,8)) ! count 1
      CALL VSS1P1N_2(W(1,3), W(1,15), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/11,10,5,4/), 
     & (/43,44,45,46/), 
     & TMP, W, AMP(1,9))
      CALL VSS1P1N_2(W(1,3), W(1,16), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/12,6/), 
     & (/44,46/), 
     & TMP, W, AMP(1,9))
      CALL VSS1P1N_2(W(1,4), W(1,15), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/8,7,2,1/), 
     & (/43,44,45,46/), 
     & TMP, W, AMP(1,9))
      CALL VSS1P1N_2(W(1,4), W(1,16), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/9,3/), 
     & (/44,46/), 
     & TMP, W, AMP(1,9)) ! count 1
      CALL FFV1_1(W(1,41),W(1,1),GC_16,ZERO, FK_ZERO,W(1,51)) ! count 3
      CALL FFV1_1(W(1,41),W(1,2),GC_16,ZERO, FK_ZERO,W(1,52)) ! count 3
      CALL FFV1_1(W(1,42),W(1,1),GC_16,ZERO, FK_ZERO,W(1,53)) ! count 3
      CALL FFV1_1(W(1,42),W(1,2),GC_16,ZERO, FK_ZERO,W(1,54)) ! count 3
      CALL FFS1P1N_2(W(1,5), W(1,21), GC_62, TMP(1))
      call CombineAmp(4,
     & (/11,5,8,2/), 
     & (/51,52,53,54/),
     & TMP, W, AMP(1,10))
      CALL FFS1P1N_2(W(1,5), W(1,22), GC_62, TMP(1))
      call CombineAmp(4,
     & (/10,4,7,1/), 
     & (/51,52,53,54/),
     & TMP, W, AMP(1,10))
      CALL FFS1P1N_2(W(1,6), W(1,22), GC_62, TMP(1))
      call CombineAmp(4,
     & (/12,6,9,3/), 
     & (/51,52,53,54/),
     & TMP, W, AMP(1,10)) ! count 1
      CALL VSS1_3(W(1,1),W(1,21),GC_15,MDL_MASSB, ZERO,W(1,55)) ! count 4
      CALL VSS1_3(W(1,1),W(1,22),GC_15,MDL_MASSB, ZERO,W(1,56)) ! count 8
      CALL VSS1_3(W(1,2),W(1,21),GC_15,MDL_MASSB, ZERO,W(1,57)) ! count 4
      CALL VSS1_3(W(1,2),W(1,22),GC_15,MDL_MASSB, ZERO,W(1,58)) ! count 8
      CALL FFS1P1N_3(W(1,5), W(1,41), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/11,10,5,4/), 
     & (/55,56,57,58/), 
     & TMP, W, AMP(1,11))
      CALL FFS1P1N_3(W(1,5), W(1,42), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/8,7,2,1/), 
     & (/55,56,57,58/), 
     & TMP, W, AMP(1,11))
      CALL FFS1P1N_3(W(1,6), W(1,41), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/12,6/), 
     & (/56,58/), 
     & TMP, W, AMP(1,11))
      CALL FFS1P1N_3(W(1,6), W(1,42), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/9,3/), 
     & (/56,58/), 
     & TMP, W, AMP(1,11)) ! count 1
      CALL FFV1_2(W(1,29),W(1,1),GC_16,ZERO, FK_ZERO,W(1,59)) ! count 3
      CALL FFV1_2(W(1,29),W(1,2),GC_16,ZERO, FK_ZERO,W(1,60)) ! count 3
      CALL FFV1_2(W(1,30),W(1,1),GC_16,ZERO, FK_ZERO,W(1,61)) ! count 3
      CALL FFV1_2(W(1,30),W(1,2),GC_16,ZERO, FK_ZERO,W(1,62)) ! count 3
      CALL FFS2P1N_1(W(1,7), W(1,15), GC_62, TMP(1))
      call CombineAmp(4,
     & (/11,5,8,2/), 
     & (/59,60,61,62/),
     & TMP, W, AMP(1,12))
      CALL FFS2P1N_1(W(1,8), W(1,15), GC_62, TMP(1))
      call CombineAmp(4,
     & (/10,4,7,1/), 
     & (/59,60,61,62/),
     & TMP, W, AMP(1,12))
      CALL FFS2P1N_1(W(1,8), W(1,16), GC_62, TMP(1))
      call CombineAmp(4,
     & (/12,6,9,3/), 
     & (/59,60,61,62/),
     & TMP, W, AMP(1,12)) ! count 1
      CALL VSS1_2(W(1,1),W(1,15),GC_15,MDL_MASSB, ZERO,W(1,63)) ! count 8
      CALL VSS1_2(W(1,1),W(1,16),GC_15,MDL_MASSB, ZERO,W(1,64)) ! count 4
      CALL VSS1_2(W(1,2),W(1,15),GC_15,MDL_MASSB, ZERO,W(1,65)) ! count 8
      CALL VSS1_2(W(1,2),W(1,16),GC_15,MDL_MASSB, ZERO,W(1,66)) ! count 4
      CALL FFS2P1N_3(W(1,29), W(1,7), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/11,5/), 
     & (/63,65/), 
     & TMP, W, AMP(1,13))
      CALL FFS2P1N_3(W(1,29), W(1,8), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/10,12,4,6/), 
     & (/63,64,65,66/), 
     & TMP, W, AMP(1,13))
      CALL FFS2P1N_3(W(1,30), W(1,7), GC_62, TMP(1))
      call CombineAmpS(2, 
     &(/8,2/), 
     & (/63,65/), 
     & TMP, W, AMP(1,13))
      CALL FFS2P1N_3(W(1,30), W(1,8), GC_62, TMP(1))
      call CombineAmpS(4, 
     &(/7,9,1,3/), 
     & (/63,64,65,66/), 
     & TMP, W, AMP(1,13)) ! count 1
      CALL VVSS1_0(W(1,1),W(1,3),W(1,21),W(1,15),GC_20,AMP(11,14))
      CALL VVSS1_0(W(1,1),W(1,3),W(1,22),W(1,15),GC_20,AMP(10,14))
      CALL VVSS1_0(W(1,1),W(1,3),W(1,22),W(1,16),GC_20,AMP(12,14))
      CALL VVSS1_0(W(1,2),W(1,4),W(1,21),W(1,15),GC_20,AMP(2,14))
      CALL VVSS1_0(W(1,2),W(1,4),W(1,22),W(1,15),GC_20,AMP(1,14))
      CALL VVSS1_0(W(1,2),W(1,4),W(1,22),W(1,16),GC_20,AMP(3,14)) ! count 1
      CALL VVSS1_0(W(1,1),W(1,3),W(1,21),W(1,15),GC_20,AMP(11,15))
      CALL VVSS1_0(W(1,1),W(1,3),W(1,22),W(1,15),GC_20,AMP(10,15))
      CALL VVSS1_0(W(1,1),W(1,3),W(1,22),W(1,16),GC_20,AMP(12,15))
      CALL VVSS1_0(W(1,2),W(1,4),W(1,21),W(1,15),GC_20,AMP(2,15))
      CALL VVSS1_0(W(1,2),W(1,4),W(1,22),W(1,15),GC_20,AMP(1,15))
      CALL VVSS1_0(W(1,2),W(1,4),W(1,22),W(1,16),GC_20,AMP(3,15)) ! count 1
      CALL VSS1P1N_3(W(1,3), W(1,21), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/11,5/), 
     & (/63,65/), 
     & TMP, W, AMP(1,16))
      CALL VSS1P1N_3(W(1,3), W(1,22), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/10,12,4,6/), 
     & (/63,64,65,66/), 
     & TMP, W, AMP(1,16))
      CALL VSS1P1N_3(W(1,4), W(1,21), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/8,2/), 
     & (/63,65/), 
     & TMP, W, AMP(1,16))
      CALL VSS1P1N_3(W(1,4), W(1,22), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/7,9,1,3/), 
     & (/63,64,65,66/), 
     & TMP, W, AMP(1,16)) ! count 1
      CALL VSS1P1N_2(W(1,3), W(1,15), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/11,10,5,4/), 
     & (/55,56,57,58/), 
     & TMP, W, AMP(1,17))
      CALL VSS1P1N_2(W(1,3), W(1,16), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/12,6/), 
     & (/56,58/), 
     & TMP, W, AMP(1,17))
      CALL VSS1P1N_2(W(1,4), W(1,15), GC_15, TMP(1))
      call CombineAmpS(4, 
     &(/8,7,2,1/), 
     & (/55,56,57,58/), 
     & TMP, W, AMP(1,17))
      CALL VSS1P1N_2(W(1,4), W(1,16), GC_15, TMP(1))
      call CombineAmpS(2, 
     &(/9,3/), 
     & (/56,58/), 
     & TMP, W, AMP(1,17)) ! count 1
      DO K = 1, NCOMB
        
        TMP_JAMP(1) = AMP( K,1) +  AMP( K,2)  ! used 2 times
        TMP_JAMP(2) = TMP_JAMP(1) +  AMP( K,3)  ! used 2 times
        JAMP(1,1) = AMP( K,4)+AMP( K,5)+AMP( K,6)+AMP( K,12)+AMP( K,13)+
     $  AMP( K,15)+AMP( K,16) +((0.000000000000000D+00,-1.000000000000000D+00))*
     $  TMP_JAMP(2)
        JAMP(2,1) = AMP( K,7)+AMP( K,8)+AMP( K,9)+AMP( K,10)+AMP( K,11)+
     $  AMP( K,14)+AMP( K,17) +((0.000000000000000D+00,1.000000000000000D+00))*T
     $  MP_JAMP(2)

        TS(K) = 0.D0 
        DO M = 1, NAMPSO
          DO I = 1, NCOLOR
            ZTEMP = (0.D0,0.D0)
            DO J = 1, NCOLOR
              ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
            ENDDO
            DO N = 1, NAMPSO

              TS(K) = TS(K) + ZTEMP*DCONJG(JAMP(I,N))

            ENDDO
          ENDDO
        ENDDO
        if(sde_strat.eq.1) then
        
        IF(SDE_STRAT.EQ.1)THEN
          AMP2(1)=AMP2(1)+AMP( K,1)*DCONJG(AMP( K,1))
          AMP2(2)=AMP2(2)+AMP( K,2)*DCONJG(AMP( K,2))
          AMP2(3)=AMP2(3)+AMP( K,3)*DCONJG(AMP( K,3))
          AMP2(4)=AMP2(4)+AMP( K,4)*DCONJG(AMP( K,4))
          AMP2(5)=AMP2(5)+AMP( K,5)*DCONJG(AMP( K,5))
          AMP2(6)=AMP2(6)+AMP( K,6)*DCONJG(AMP( K,6))
          AMP2(7)=AMP2(7)+AMP( K,7)*DCONJG(AMP( K,7))
          AMP2(8)=AMP2(8)+AMP( K,8)*DCONJG(AMP( K,8))
          AMP2(9)=AMP2(9)+AMP( K,9)*DCONJG(AMP( K,9))
          AMP2(10)=AMP2(10)+AMP( K,10)*DCONJG(AMP( K,10))
          AMP2(11)=AMP2(11)+AMP( K,11)*DCONJG(AMP( K,11))
          AMP2(12)=AMP2(12)+AMP( K,12)*DCONJG(AMP( K,12))
          AMP2(13)=AMP2(13)+AMP( K,13)*DCONJG(AMP( K,13))
          AMP2(15)=AMP2(15)+AMP( K,16)*DCONJG(AMP( K,16))
          AMP2(16)=AMP2(16)+AMP( K,17)*DCONJG(AMP( K,17))
        ENDIF

        endif
        Do I = 1, NCOLOR
          DO M = 1, NAMPSO
            DO N = 1, NAMPSO

              Jamp2(i)=Jamp2(i)+DABS(DBLE(Jamp(i,m)*dconjg(Jamp(i,n))))

            enddo
          enddo
        Enddo
      ENDDO

      END


      SUBROUTINE PRINT_ZERO_AMP_1()

      integer i
      i =1
      return
      end
C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX1(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,i),i=  1,  1) /    1/
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS1
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)
     $   +AMPSPLITORDERS(ORDERINDEXB,I)
      ENDDO
      SQSOINDEX1=SOINDEX_FOR_SQUARED_ORDERS1(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,i),i=  1,  1) /    2/
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function' 
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN1(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS1/SQPLITORDERS	  
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function'
     $ //' GET_SQUARED_ORDERS_FOR_SOINDEX1'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.gt.0.and.SOINDEX.le.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX1'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

